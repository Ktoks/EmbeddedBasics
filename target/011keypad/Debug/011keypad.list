
011keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e80  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08001028  08001028  00011028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010cc  080010cc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080010cc  080010cc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010cc  080010cc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010cc  080010cc  000110cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010d0  080010d0  000110d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080010d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08001138  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001138  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000021db  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005d3  00000000  00000000  00022269  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000120  00000000  00000000  00022840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  00022960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000029cc  00000000  00000000  00022a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000126d  00000000  00000000  00025414  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009121  00000000  00000000  00026681  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f7a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000950  00000000  00000000  0002f820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001010 	.word	0x08001010

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08001010 	.word	0x08001010

080001e8 <delay>:

#include<stdio.h>
#include<stdint.h>
//#include "main.h"

void delay(void){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 300000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <delay+0x24>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	000493df 	.word	0x000493df

08000210 <main>:


int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0

	// peripheral register addresses
	uint32_t volatile *const pGPIOModeReg 	= 	(uint32_t*) 0x40020C00;
 8000216:	4ba4      	ldr	r3, [pc, #656]	; (80004a8 <main+0x298>)
 8000218:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pInputDataReg 	= 	(uint32_t*) 0x40020C10;
 800021a:	4ba4      	ldr	r3, [pc, #656]	; (80004ac <main+0x29c>)
 800021c:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pOutputDataReg = 	(uint32_t*) 0x40020C14;
 800021e:	4ba4      	ldr	r3, [pc, #656]	; (80004b0 <main+0x2a0>)
 8000220:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pClockCtrlReg 	= 	(uint32_t*) 0x40023830;
 8000222:	4ba4      	ldr	r3, [pc, #656]	; (80004b4 <main+0x2a4>)
 8000224:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pPullupDownReg = 	(uint32_t*) 0x40020C0C;
 8000226:	4ba4      	ldr	r3, [pc, #656]	; (80004b8 <main+0x2a8>)
 8000228:	607b      	str	r3, [r7, #4]

	// enable the clock for gpio peripheral d in AHB1ENR
	*pClockCtrlReg |= (1 <<3);
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0208 	orr.w	r2, r3, #8
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	601a      	str	r2, [r3, #0]

	// configure the mode of row pins to be output (PD0-3)
		// clear pins 0-3
	*pGPIOModeReg &= ~(0xFF);
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	601a      	str	r2, [r3, #0]
		// set pins 0-3
	*pGPIOModeReg |= 0x55;
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	601a      	str	r2, [r3, #0]

	// configure the mode of column pins to be input (PD8-11)
		// clear pins 8-11
	*pGPIOModeReg &= ~(0xFF << 16);
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	601a      	str	r2, [r3, #0]

	// enable internal pull-up resistors for pd8-11
		// clear pins 8-11
	*pPullupDownReg &= ~(0xFF << 16);
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
	*pPullupDownReg |= (0x55 << 16);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f443 02aa 	orr.w	r2, r3, #5570560	; 0x550000
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]

	while(1){
		// make all rows high
		*pOutputDataReg |= 0x0f;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f043 020f 	orr.w	r2, r3, #15
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	601a      	str	r2, [r3, #0]

		// make r1 low(pd0)
		*pOutputDataReg &= ~(1);
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f023 0201 	bic.w	r2, r3, #1
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]

		// Scan the columns
		// check if c1(pd8) is high or low
		if(!(*pInputDataReg & (1 << 8))) {
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000292:	2b00      	cmp	r3, #0
 8000294:	d104      	bne.n	80002a0 <main+0x90>
			delay();
 8000296:	f7ff ffa7 	bl	80001e8 <delay>
			printf("1\n");
 800029a:	4888      	ldr	r0, [pc, #544]	; (80004bc <main+0x2ac>)
 800029c:	f000 faac 	bl	80007f8 <puts>
		}

		// check if c2(pd9) is high or low
		if(!(*pInputDataReg & (1 << 9))) {
 80002a0:	693b      	ldr	r3, [r7, #16]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d104      	bne.n	80002b6 <main+0xa6>
			delay();
 80002ac:	f7ff ff9c 	bl	80001e8 <delay>
			printf("2\n");
 80002b0:	4883      	ldr	r0, [pc, #524]	; (80004c0 <main+0x2b0>)
 80002b2:	f000 faa1 	bl	80007f8 <puts>
		}

		// check if c3(pd10) is high or low
		if(!(*pInputDataReg & (1 << 10))) {
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d104      	bne.n	80002cc <main+0xbc>
			delay();
 80002c2:	f7ff ff91 	bl	80001e8 <delay>
			printf("3\n");
 80002c6:	487f      	ldr	r0, [pc, #508]	; (80004c4 <main+0x2b4>)
 80002c8:	f000 fa96 	bl	80007f8 <puts>
		}

		// check if c4(pd11) is high or low
		if(!(*pInputDataReg & (1 << 11))) {
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d104      	bne.n	80002e2 <main+0xd2>
			delay();
 80002d8:	f7ff ff86 	bl	80001e8 <delay>
			printf("A\n");
 80002dc:	487a      	ldr	r0, [pc, #488]	; (80004c8 <main+0x2b8>)
 80002de:	f000 fa8b 	bl	80007f8 <puts>
		}

		// make all rows high
		*pOutputDataReg |= 0x0f;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f043 020f 	orr.w	r2, r3, #15
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	601a      	str	r2, [r3, #0]

		// make r2 low(pd1)
		*pOutputDataReg &= ~(1 << 1);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f023 0202 	bic.w	r2, r3, #2
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	601a      	str	r2, [r3, #0]

		// Scan the columns
		// check if c1(pd8) is high or low
		if(!(*pInputDataReg & (1 << 8))) {
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000302:	2b00      	cmp	r3, #0
 8000304:	d104      	bne.n	8000310 <main+0x100>
			delay();
 8000306:	f7ff ff6f 	bl	80001e8 <delay>
			printf("4\n");
 800030a:	4870      	ldr	r0, [pc, #448]	; (80004cc <main+0x2bc>)
 800030c:	f000 fa74 	bl	80007f8 <puts>
		}

		// check if c2(pd9) is high or low
		if(!(*pInputDataReg & (1 << 9))) {
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000318:	2b00      	cmp	r3, #0
 800031a:	d104      	bne.n	8000326 <main+0x116>
			delay();
 800031c:	f7ff ff64 	bl	80001e8 <delay>
			printf("5\n");
 8000320:	486b      	ldr	r0, [pc, #428]	; (80004d0 <main+0x2c0>)
 8000322:	f000 fa69 	bl	80007f8 <puts>
		}

		// check if c3(pd10) is high or low
		if(!(*pInputDataReg & (1 << 10))) {
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800032e:	2b00      	cmp	r3, #0
 8000330:	d104      	bne.n	800033c <main+0x12c>
			delay();
 8000332:	f7ff ff59 	bl	80001e8 <delay>
			printf("6\n");
 8000336:	4867      	ldr	r0, [pc, #412]	; (80004d4 <main+0x2c4>)
 8000338:	f000 fa5e 	bl	80007f8 <puts>
		}

		// check if c4(pd11) is high or low
		if(!(*pInputDataReg & (1 << 11))) {
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000344:	2b00      	cmp	r3, #0
 8000346:	d104      	bne.n	8000352 <main+0x142>
			delay();
 8000348:	f7ff ff4e 	bl	80001e8 <delay>
			printf("B\n");
 800034c:	4862      	ldr	r0, [pc, #392]	; (80004d8 <main+0x2c8>)
 800034e:	f000 fa53 	bl	80007f8 <puts>
		}

		// make all rows high
		*pOutputDataReg |= 0x0f;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f043 020f 	orr.w	r2, r3, #15
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	601a      	str	r2, [r3, #0]

		// make r3 low(pd1)
		*pOutputDataReg &= ~(1 << 2);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f023 0204 	bic.w	r2, r3, #4
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	601a      	str	r2, [r3, #0]

		// Scan the columns
		// check if c1(pd8) is high or low
		if(!(*pInputDataReg & (1 << 8))) {
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000372:	2b00      	cmp	r3, #0
 8000374:	d104      	bne.n	8000380 <main+0x170>
			delay();
 8000376:	f7ff ff37 	bl	80001e8 <delay>
			printf("7\n");
 800037a:	4858      	ldr	r0, [pc, #352]	; (80004dc <main+0x2cc>)
 800037c:	f000 fa3c 	bl	80007f8 <puts>
		}

		// check if c2(pd9) is high or low
		if(!(*pInputDataReg & (1 << 9))) {
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000388:	2b00      	cmp	r3, #0
 800038a:	d104      	bne.n	8000396 <main+0x186>
			delay();
 800038c:	f7ff ff2c 	bl	80001e8 <delay>
			printf("8\n");
 8000390:	4853      	ldr	r0, [pc, #332]	; (80004e0 <main+0x2d0>)
 8000392:	f000 fa31 	bl	80007f8 <puts>
		}

		// check if c3(pd10) is high or low
		if(!(*pInputDataReg & (1 << 10))) {
 8000396:	693b      	ldr	r3, [r7, #16]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d104      	bne.n	80003ac <main+0x19c>
			delay();
 80003a2:	f7ff ff21 	bl	80001e8 <delay>
			printf("9\n");
 80003a6:	484f      	ldr	r0, [pc, #316]	; (80004e4 <main+0x2d4>)
 80003a8:	f000 fa26 	bl	80007f8 <puts>
		}

		// check if c4(pd11) is high or low
		if(!(*pInputDataReg & (1 << 11))) {
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d104      	bne.n	80003c2 <main+0x1b2>
			delay();
 80003b8:	f7ff ff16 	bl	80001e8 <delay>
			printf("C\n");
 80003bc:	484a      	ldr	r0, [pc, #296]	; (80004e8 <main+0x2d8>)
 80003be:	f000 fa1b 	bl	80007f8 <puts>
		}

		// make all rows high
		*pOutputDataReg |= 0x0f;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f043 020f 	orr.w	r2, r3, #15
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	601a      	str	r2, [r3, #0]

		// make r4 low(pd0)
		*pOutputDataReg &= ~(1 << 3);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f023 0208 	bic.w	r2, r3, #8
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	601a      	str	r2, [r3, #0]

		// Scan the columns
		// check if c1(pd8) is high or low
		if(!(*pInputDataReg & (1 << 8))) {
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d104      	bne.n	80003f0 <main+0x1e0>
			delay();
 80003e6:	f7ff feff 	bl	80001e8 <delay>
			printf("*\n");
 80003ea:	4840      	ldr	r0, [pc, #256]	; (80004ec <main+0x2dc>)
 80003ec:	f000 fa04 	bl	80007f8 <puts>
		}

		// check if c2(pd9) is high or low
		if(!(*pInputDataReg & (1 << 9))) {
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d104      	bne.n	8000406 <main+0x1f6>
			delay();
 80003fc:	f7ff fef4 	bl	80001e8 <delay>
			printf("0\n");
 8000400:	483b      	ldr	r0, [pc, #236]	; (80004f0 <main+0x2e0>)
 8000402:	f000 f9f9 	bl	80007f8 <puts>
		}

		// check if c3(pd10) is high or low
		if(!(*pInputDataReg & (1 << 10))) {
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800040e:	2b00      	cmp	r3, #0
 8000410:	d104      	bne.n	800041c <main+0x20c>
			delay();
 8000412:	f7ff fee9 	bl	80001e8 <delay>
			printf("#\n");
 8000416:	4837      	ldr	r0, [pc, #220]	; (80004f4 <main+0x2e4>)
 8000418:	f000 f9ee 	bl	80007f8 <puts>
		}

		// check if c4(pd11) is high or low
		if(!(*pInputDataReg & (1 << 11))) {
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000424:	2b00      	cmp	r3, #0
 8000426:	d104      	bne.n	8000432 <main+0x222>
			delay();
 8000428:	f7ff fede 	bl	80001e8 <delay>
			printf("D\n");
 800042c:	4832      	ldr	r0, [pc, #200]	; (80004f8 <main+0x2e8>)
 800042e:	f000 f9e3 	bl	80007f8 <puts>
		}

		// make all rows high
		*pOutputDataReg |= 0x0f;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f043 020f 	orr.w	r2, r3, #15
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	601a      	str	r2, [r3, #0]

		// make r2 low(pd1)
		*pOutputDataReg &= ~(1 << 4);
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f023 0210 	bic.w	r2, r3, #16
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	601a      	str	r2, [r3, #0]

		// Scan the columns
		// check if c1(pd8) is high or low
		if(!(*pInputDataReg & (1 << 8))) {
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000452:	2b00      	cmp	r3, #0
 8000454:	d104      	bne.n	8000460 <main+0x250>
			delay();
 8000456:	f7ff fec7 	bl	80001e8 <delay>
			printf("*\n");
 800045a:	4824      	ldr	r0, [pc, #144]	; (80004ec <main+0x2dc>)
 800045c:	f000 f9cc 	bl	80007f8 <puts>
		}

		// check if c2(pd9) is high or low
		if(!(*pInputDataReg & (1 << 9))) {
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000468:	2b00      	cmp	r3, #0
 800046a:	d104      	bne.n	8000476 <main+0x266>
			delay();
 800046c:	f7ff febc 	bl	80001e8 <delay>
			printf("0\n");
 8000470:	481f      	ldr	r0, [pc, #124]	; (80004f0 <main+0x2e0>)
 8000472:	f000 f9c1 	bl	80007f8 <puts>
		}

		// check if c3(pd10) is high or low
		if(!(*pInputDataReg & (1 << 10))) {
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x27c>
			delay();
 8000482:	f7ff feb1 	bl	80001e8 <delay>
			printf("#\n");
 8000486:	481b      	ldr	r0, [pc, #108]	; (80004f4 <main+0x2e4>)
 8000488:	f000 f9b6 	bl	80007f8 <puts>
		}

		// check if c4(pd11) is high or low
		if(!(*pInputDataReg & (1 << 11))) {
 800048c:	693b      	ldr	r3, [r7, #16]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000494:	2b00      	cmp	r3, #0
 8000496:	f47f aeec 	bne.w	8000272 <main+0x62>
			delay();
 800049a:	f7ff fea5 	bl	80001e8 <delay>
			printf("D\n");
 800049e:	4816      	ldr	r0, [pc, #88]	; (80004f8 <main+0x2e8>)
 80004a0:	f000 f9aa 	bl	80007f8 <puts>
		*pOutputDataReg |= 0x0f;
 80004a4:	e6e5      	b.n	8000272 <main+0x62>
 80004a6:	bf00      	nop
 80004a8:	40020c00 	.word	0x40020c00
 80004ac:	40020c10 	.word	0x40020c10
 80004b0:	40020c14 	.word	0x40020c14
 80004b4:	40023830 	.word	0x40023830
 80004b8:	40020c0c 	.word	0x40020c0c
 80004bc:	08001028 	.word	0x08001028
 80004c0:	0800102c 	.word	0x0800102c
 80004c4:	08001030 	.word	0x08001030
 80004c8:	08001034 	.word	0x08001034
 80004cc:	08001038 	.word	0x08001038
 80004d0:	0800103c 	.word	0x0800103c
 80004d4:	08001040 	.word	0x08001040
 80004d8:	08001044 	.word	0x08001044
 80004dc:	08001048 	.word	0x08001048
 80004e0:	0800104c 	.word	0x0800104c
 80004e4:	08001050 	.word	0x08001050
 80004e8:	08001054 	.word	0x08001054
 80004ec:	08001058 	.word	0x08001058
 80004f0:	0800105c 	.word	0x0800105c
 80004f4:	08001060 	.word	0x08001060
 80004f8:	08001064 	.word	0x08001064

080004fc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <ITM_SendChar+0x44>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <ITM_SendChar+0x44>)
 800050c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000510:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <ITM_SendChar+0x48>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <ITM_SendChar+0x48>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800051e:	bf00      	nop
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f8      	beq.n	8000520 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800052e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	6013      	str	r3, [r2, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	e000edfc 	.word	0xe000edfc
 8000544:	e0000e00 	.word	0xe0000e00

08000548 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e00a      	b.n	8000570 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800055a:	f3af 8000 	nop.w
 800055e:	4601      	mov	r1, r0
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	b2ca      	uxtb	r2, r1
 8000568:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	429a      	cmp	r2, r3
 8000576:	dbf0      	blt.n	800055a <_read+0x12>
	}

return len;
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b086      	sub	sp, #24
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	e009      	b.n	80005a8 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	60ba      	str	r2, [r7, #8]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffad 	bl	80004fc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbf1      	blt.n	8000594 <_write+0x12>
	}
	return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_close>:

int _close(int file)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	return -1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e0:	605a      	str	r2, [r3, #4]
	return 0;
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <_isatty>:

int _isatty(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
	return 1;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000602:	b480      	push	{r7}
 8000604:	b085      	sub	sp, #20
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
	return 0;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
	...

0800061c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000624:	4a14      	ldr	r2, [pc, #80]	; (8000678 <_sbrk+0x5c>)
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <_sbrk+0x60>)
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <_sbrk+0x64>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <_sbrk+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	429a      	cmp	r2, r3
 800064a:	d207      	bcs.n	800065c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800064c:	f000 f846 	bl	80006dc <__errno>
 8000650:	4602      	mov	r2, r0
 8000652:	230c      	movs	r3, #12
 8000654:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	e009      	b.n	8000670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	4a05      	ldr	r2, [pc, #20]	; (8000680 <_sbrk+0x64>)
 800066c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20020000 	.word	0x20020000
 800067c:	00000400 	.word	0x00000400
 8000680:	20000080 	.word	0x20000080
 8000684:	20000090 	.word	0x20000090

08000688 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800068c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b6:	f000 f817 	bl	80006e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fda9 	bl	8000210 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   r0, =_estack
 80006c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006cc:	080010d4 	.word	0x080010d4
  ldr r2, =_sbss
 80006d0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006d4:	20000090 	.word	0x20000090

080006d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC_IRQHandler>
	...

080006dc <__errno>:
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <__errno+0x8>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000000 	.word	0x20000000

080006e8 <__libc_init_array>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4e0d      	ldr	r6, [pc, #52]	; (8000720 <__libc_init_array+0x38>)
 80006ec:	4c0d      	ldr	r4, [pc, #52]	; (8000724 <__libc_init_array+0x3c>)
 80006ee:	1ba4      	subs	r4, r4, r6
 80006f0:	10a4      	asrs	r4, r4, #2
 80006f2:	2500      	movs	r5, #0
 80006f4:	42a5      	cmp	r5, r4
 80006f6:	d109      	bne.n	800070c <__libc_init_array+0x24>
 80006f8:	4e0b      	ldr	r6, [pc, #44]	; (8000728 <__libc_init_array+0x40>)
 80006fa:	4c0c      	ldr	r4, [pc, #48]	; (800072c <__libc_init_array+0x44>)
 80006fc:	f000 fc88 	bl	8001010 <_init>
 8000700:	1ba4      	subs	r4, r4, r6
 8000702:	10a4      	asrs	r4, r4, #2
 8000704:	2500      	movs	r5, #0
 8000706:	42a5      	cmp	r5, r4
 8000708:	d105      	bne.n	8000716 <__libc_init_array+0x2e>
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000710:	4798      	blx	r3
 8000712:	3501      	adds	r5, #1
 8000714:	e7ee      	b.n	80006f4 <__libc_init_array+0xc>
 8000716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800071a:	4798      	blx	r3
 800071c:	3501      	adds	r5, #1
 800071e:	e7f2      	b.n	8000706 <__libc_init_array+0x1e>
 8000720:	080010cc 	.word	0x080010cc
 8000724:	080010cc 	.word	0x080010cc
 8000728:	080010cc 	.word	0x080010cc
 800072c:	080010d0 	.word	0x080010d0

08000730 <memset>:
 8000730:	4402      	add	r2, r0
 8000732:	4603      	mov	r3, r0
 8000734:	4293      	cmp	r3, r2
 8000736:	d100      	bne.n	800073a <memset+0xa>
 8000738:	4770      	bx	lr
 800073a:	f803 1b01 	strb.w	r1, [r3], #1
 800073e:	e7f9      	b.n	8000734 <memset+0x4>

08000740 <_puts_r>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	460e      	mov	r6, r1
 8000744:	4605      	mov	r5, r0
 8000746:	b118      	cbz	r0, 8000750 <_puts_r+0x10>
 8000748:	6983      	ldr	r3, [r0, #24]
 800074a:	b90b      	cbnz	r3, 8000750 <_puts_r+0x10>
 800074c:	f000 fa0c 	bl	8000b68 <__sinit>
 8000750:	69ab      	ldr	r3, [r5, #24]
 8000752:	68ac      	ldr	r4, [r5, #8]
 8000754:	b913      	cbnz	r3, 800075c <_puts_r+0x1c>
 8000756:	4628      	mov	r0, r5
 8000758:	f000 fa06 	bl	8000b68 <__sinit>
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <_puts_r+0xac>)
 800075e:	429c      	cmp	r4, r3
 8000760:	d117      	bne.n	8000792 <_puts_r+0x52>
 8000762:	686c      	ldr	r4, [r5, #4]
 8000764:	89a3      	ldrh	r3, [r4, #12]
 8000766:	071b      	lsls	r3, r3, #28
 8000768:	d51d      	bpl.n	80007a6 <_puts_r+0x66>
 800076a:	6923      	ldr	r3, [r4, #16]
 800076c:	b1db      	cbz	r3, 80007a6 <_puts_r+0x66>
 800076e:	3e01      	subs	r6, #1
 8000770:	68a3      	ldr	r3, [r4, #8]
 8000772:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000776:	3b01      	subs	r3, #1
 8000778:	60a3      	str	r3, [r4, #8]
 800077a:	b9e9      	cbnz	r1, 80007b8 <_puts_r+0x78>
 800077c:	2b00      	cmp	r3, #0
 800077e:	da2e      	bge.n	80007de <_puts_r+0x9e>
 8000780:	4622      	mov	r2, r4
 8000782:	210a      	movs	r1, #10
 8000784:	4628      	mov	r0, r5
 8000786:	f000 f83f 	bl	8000808 <__swbuf_r>
 800078a:	3001      	adds	r0, #1
 800078c:	d011      	beq.n	80007b2 <_puts_r+0x72>
 800078e:	200a      	movs	r0, #10
 8000790:	e011      	b.n	80007b6 <_puts_r+0x76>
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <_puts_r+0xb0>)
 8000794:	429c      	cmp	r4, r3
 8000796:	d101      	bne.n	800079c <_puts_r+0x5c>
 8000798:	68ac      	ldr	r4, [r5, #8]
 800079a:	e7e3      	b.n	8000764 <_puts_r+0x24>
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <_puts_r+0xb4>)
 800079e:	429c      	cmp	r4, r3
 80007a0:	bf08      	it	eq
 80007a2:	68ec      	ldreq	r4, [r5, #12]
 80007a4:	e7de      	b.n	8000764 <_puts_r+0x24>
 80007a6:	4621      	mov	r1, r4
 80007a8:	4628      	mov	r0, r5
 80007aa:	f000 f87f 	bl	80008ac <__swsetup_r>
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d0dd      	beq.n	800076e <_puts_r+0x2e>
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	da04      	bge.n	80007c6 <_puts_r+0x86>
 80007bc:	69a2      	ldr	r2, [r4, #24]
 80007be:	429a      	cmp	r2, r3
 80007c0:	dc06      	bgt.n	80007d0 <_puts_r+0x90>
 80007c2:	290a      	cmp	r1, #10
 80007c4:	d004      	beq.n	80007d0 <_puts_r+0x90>
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	6022      	str	r2, [r4, #0]
 80007cc:	7019      	strb	r1, [r3, #0]
 80007ce:	e7cf      	b.n	8000770 <_puts_r+0x30>
 80007d0:	4622      	mov	r2, r4
 80007d2:	4628      	mov	r0, r5
 80007d4:	f000 f818 	bl	8000808 <__swbuf_r>
 80007d8:	3001      	adds	r0, #1
 80007da:	d1c9      	bne.n	8000770 <_puts_r+0x30>
 80007dc:	e7e9      	b.n	80007b2 <_puts_r+0x72>
 80007de:	6823      	ldr	r3, [r4, #0]
 80007e0:	200a      	movs	r0, #10
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	6022      	str	r2, [r4, #0]
 80007e6:	7018      	strb	r0, [r3, #0]
 80007e8:	e7e5      	b.n	80007b6 <_puts_r+0x76>
 80007ea:	bf00      	nop
 80007ec:	0800108c 	.word	0x0800108c
 80007f0:	080010ac 	.word	0x080010ac
 80007f4:	0800106c 	.word	0x0800106c

080007f8 <puts>:
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <puts+0xc>)
 80007fa:	4601      	mov	r1, r0
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	f7ff bf9f 	b.w	8000740 <_puts_r>
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000

08000808 <__swbuf_r>:
 8000808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080a:	460e      	mov	r6, r1
 800080c:	4614      	mov	r4, r2
 800080e:	4605      	mov	r5, r0
 8000810:	b118      	cbz	r0, 800081a <__swbuf_r+0x12>
 8000812:	6983      	ldr	r3, [r0, #24]
 8000814:	b90b      	cbnz	r3, 800081a <__swbuf_r+0x12>
 8000816:	f000 f9a7 	bl	8000b68 <__sinit>
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <__swbuf_r+0x98>)
 800081c:	429c      	cmp	r4, r3
 800081e:	d12a      	bne.n	8000876 <__swbuf_r+0x6e>
 8000820:	686c      	ldr	r4, [r5, #4]
 8000822:	69a3      	ldr	r3, [r4, #24]
 8000824:	60a3      	str	r3, [r4, #8]
 8000826:	89a3      	ldrh	r3, [r4, #12]
 8000828:	071a      	lsls	r2, r3, #28
 800082a:	d52e      	bpl.n	800088a <__swbuf_r+0x82>
 800082c:	6923      	ldr	r3, [r4, #16]
 800082e:	b363      	cbz	r3, 800088a <__swbuf_r+0x82>
 8000830:	6923      	ldr	r3, [r4, #16]
 8000832:	6820      	ldr	r0, [r4, #0]
 8000834:	1ac0      	subs	r0, r0, r3
 8000836:	6963      	ldr	r3, [r4, #20]
 8000838:	b2f6      	uxtb	r6, r6
 800083a:	4283      	cmp	r3, r0
 800083c:	4637      	mov	r7, r6
 800083e:	dc04      	bgt.n	800084a <__swbuf_r+0x42>
 8000840:	4621      	mov	r1, r4
 8000842:	4628      	mov	r0, r5
 8000844:	f000 f926 	bl	8000a94 <_fflush_r>
 8000848:	bb28      	cbnz	r0, 8000896 <__swbuf_r+0x8e>
 800084a:	68a3      	ldr	r3, [r4, #8]
 800084c:	3b01      	subs	r3, #1
 800084e:	60a3      	str	r3, [r4, #8]
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	6022      	str	r2, [r4, #0]
 8000856:	701e      	strb	r6, [r3, #0]
 8000858:	6963      	ldr	r3, [r4, #20]
 800085a:	3001      	adds	r0, #1
 800085c:	4283      	cmp	r3, r0
 800085e:	d004      	beq.n	800086a <__swbuf_r+0x62>
 8000860:	89a3      	ldrh	r3, [r4, #12]
 8000862:	07db      	lsls	r3, r3, #31
 8000864:	d519      	bpl.n	800089a <__swbuf_r+0x92>
 8000866:	2e0a      	cmp	r6, #10
 8000868:	d117      	bne.n	800089a <__swbuf_r+0x92>
 800086a:	4621      	mov	r1, r4
 800086c:	4628      	mov	r0, r5
 800086e:	f000 f911 	bl	8000a94 <_fflush_r>
 8000872:	b190      	cbz	r0, 800089a <__swbuf_r+0x92>
 8000874:	e00f      	b.n	8000896 <__swbuf_r+0x8e>
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <__swbuf_r+0x9c>)
 8000878:	429c      	cmp	r4, r3
 800087a:	d101      	bne.n	8000880 <__swbuf_r+0x78>
 800087c:	68ac      	ldr	r4, [r5, #8]
 800087e:	e7d0      	b.n	8000822 <__swbuf_r+0x1a>
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <__swbuf_r+0xa0>)
 8000882:	429c      	cmp	r4, r3
 8000884:	bf08      	it	eq
 8000886:	68ec      	ldreq	r4, [r5, #12]
 8000888:	e7cb      	b.n	8000822 <__swbuf_r+0x1a>
 800088a:	4621      	mov	r1, r4
 800088c:	4628      	mov	r0, r5
 800088e:	f000 f80d 	bl	80008ac <__swsetup_r>
 8000892:	2800      	cmp	r0, #0
 8000894:	d0cc      	beq.n	8000830 <__swbuf_r+0x28>
 8000896:	f04f 37ff 	mov.w	r7, #4294967295
 800089a:	4638      	mov	r0, r7
 800089c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800089e:	bf00      	nop
 80008a0:	0800108c 	.word	0x0800108c
 80008a4:	080010ac 	.word	0x080010ac
 80008a8:	0800106c 	.word	0x0800106c

080008ac <__swsetup_r>:
 80008ac:	4b32      	ldr	r3, [pc, #200]	; (8000978 <__swsetup_r+0xcc>)
 80008ae:	b570      	push	{r4, r5, r6, lr}
 80008b0:	681d      	ldr	r5, [r3, #0]
 80008b2:	4606      	mov	r6, r0
 80008b4:	460c      	mov	r4, r1
 80008b6:	b125      	cbz	r5, 80008c2 <__swsetup_r+0x16>
 80008b8:	69ab      	ldr	r3, [r5, #24]
 80008ba:	b913      	cbnz	r3, 80008c2 <__swsetup_r+0x16>
 80008bc:	4628      	mov	r0, r5
 80008be:	f000 f953 	bl	8000b68 <__sinit>
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <__swsetup_r+0xd0>)
 80008c4:	429c      	cmp	r4, r3
 80008c6:	d10f      	bne.n	80008e8 <__swsetup_r+0x3c>
 80008c8:	686c      	ldr	r4, [r5, #4]
 80008ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	0715      	lsls	r5, r2, #28
 80008d2:	d42c      	bmi.n	800092e <__swsetup_r+0x82>
 80008d4:	06d0      	lsls	r0, r2, #27
 80008d6:	d411      	bmi.n	80008fc <__swsetup_r+0x50>
 80008d8:	2209      	movs	r2, #9
 80008da:	6032      	str	r2, [r6, #0]
 80008dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e0:	81a3      	strh	r3, [r4, #12]
 80008e2:	f04f 30ff 	mov.w	r0, #4294967295
 80008e6:	e03e      	b.n	8000966 <__swsetup_r+0xba>
 80008e8:	4b25      	ldr	r3, [pc, #148]	; (8000980 <__swsetup_r+0xd4>)
 80008ea:	429c      	cmp	r4, r3
 80008ec:	d101      	bne.n	80008f2 <__swsetup_r+0x46>
 80008ee:	68ac      	ldr	r4, [r5, #8]
 80008f0:	e7eb      	b.n	80008ca <__swsetup_r+0x1e>
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <__swsetup_r+0xd8>)
 80008f4:	429c      	cmp	r4, r3
 80008f6:	bf08      	it	eq
 80008f8:	68ec      	ldreq	r4, [r5, #12]
 80008fa:	e7e6      	b.n	80008ca <__swsetup_r+0x1e>
 80008fc:	0751      	lsls	r1, r2, #29
 80008fe:	d512      	bpl.n	8000926 <__swsetup_r+0x7a>
 8000900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000902:	b141      	cbz	r1, 8000916 <__swsetup_r+0x6a>
 8000904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000908:	4299      	cmp	r1, r3
 800090a:	d002      	beq.n	8000912 <__swsetup_r+0x66>
 800090c:	4630      	mov	r0, r6
 800090e:	f000 fa19 	bl	8000d44 <_free_r>
 8000912:	2300      	movs	r3, #0
 8000914:	6363      	str	r3, [r4, #52]	; 0x34
 8000916:	89a3      	ldrh	r3, [r4, #12]
 8000918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800091c:	81a3      	strh	r3, [r4, #12]
 800091e:	2300      	movs	r3, #0
 8000920:	6063      	str	r3, [r4, #4]
 8000922:	6923      	ldr	r3, [r4, #16]
 8000924:	6023      	str	r3, [r4, #0]
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	81a3      	strh	r3, [r4, #12]
 800092e:	6923      	ldr	r3, [r4, #16]
 8000930:	b94b      	cbnz	r3, 8000946 <__swsetup_r+0x9a>
 8000932:	89a3      	ldrh	r3, [r4, #12]
 8000934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800093c:	d003      	beq.n	8000946 <__swsetup_r+0x9a>
 800093e:	4621      	mov	r1, r4
 8000940:	4630      	mov	r0, r6
 8000942:	f000 f9bf 	bl	8000cc4 <__smakebuf_r>
 8000946:	89a2      	ldrh	r2, [r4, #12]
 8000948:	f012 0301 	ands.w	r3, r2, #1
 800094c:	d00c      	beq.n	8000968 <__swsetup_r+0xbc>
 800094e:	2300      	movs	r3, #0
 8000950:	60a3      	str	r3, [r4, #8]
 8000952:	6963      	ldr	r3, [r4, #20]
 8000954:	425b      	negs	r3, r3
 8000956:	61a3      	str	r3, [r4, #24]
 8000958:	6923      	ldr	r3, [r4, #16]
 800095a:	b953      	cbnz	r3, 8000972 <__swsetup_r+0xc6>
 800095c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000960:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000964:	d1ba      	bne.n	80008dc <__swsetup_r+0x30>
 8000966:	bd70      	pop	{r4, r5, r6, pc}
 8000968:	0792      	lsls	r2, r2, #30
 800096a:	bf58      	it	pl
 800096c:	6963      	ldrpl	r3, [r4, #20]
 800096e:	60a3      	str	r3, [r4, #8]
 8000970:	e7f2      	b.n	8000958 <__swsetup_r+0xac>
 8000972:	2000      	movs	r0, #0
 8000974:	e7f7      	b.n	8000966 <__swsetup_r+0xba>
 8000976:	bf00      	nop
 8000978:	20000000 	.word	0x20000000
 800097c:	0800108c 	.word	0x0800108c
 8000980:	080010ac 	.word	0x080010ac
 8000984:	0800106c 	.word	0x0800106c

08000988 <__sflush_r>:
 8000988:	898a      	ldrh	r2, [r1, #12]
 800098a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800098e:	4605      	mov	r5, r0
 8000990:	0710      	lsls	r0, r2, #28
 8000992:	460c      	mov	r4, r1
 8000994:	d458      	bmi.n	8000a48 <__sflush_r+0xc0>
 8000996:	684b      	ldr	r3, [r1, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	dc05      	bgt.n	80009a8 <__sflush_r+0x20>
 800099c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dc02      	bgt.n	80009a8 <__sflush_r+0x20>
 80009a2:	2000      	movs	r0, #0
 80009a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d0f9      	beq.n	80009a2 <__sflush_r+0x1a>
 80009ae:	2300      	movs	r3, #0
 80009b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009b4:	682f      	ldr	r7, [r5, #0]
 80009b6:	6a21      	ldr	r1, [r4, #32]
 80009b8:	602b      	str	r3, [r5, #0]
 80009ba:	d032      	beq.n	8000a22 <__sflush_r+0x9a>
 80009bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009be:	89a3      	ldrh	r3, [r4, #12]
 80009c0:	075a      	lsls	r2, r3, #29
 80009c2:	d505      	bpl.n	80009d0 <__sflush_r+0x48>
 80009c4:	6863      	ldr	r3, [r4, #4]
 80009c6:	1ac0      	subs	r0, r0, r3
 80009c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009ca:	b10b      	cbz	r3, 80009d0 <__sflush_r+0x48>
 80009cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009ce:	1ac0      	subs	r0, r0, r3
 80009d0:	2300      	movs	r3, #0
 80009d2:	4602      	mov	r2, r0
 80009d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009d6:	6a21      	ldr	r1, [r4, #32]
 80009d8:	4628      	mov	r0, r5
 80009da:	47b0      	blx	r6
 80009dc:	1c43      	adds	r3, r0, #1
 80009de:	89a3      	ldrh	r3, [r4, #12]
 80009e0:	d106      	bne.n	80009f0 <__sflush_r+0x68>
 80009e2:	6829      	ldr	r1, [r5, #0]
 80009e4:	291d      	cmp	r1, #29
 80009e6:	d848      	bhi.n	8000a7a <__sflush_r+0xf2>
 80009e8:	4a29      	ldr	r2, [pc, #164]	; (8000a90 <__sflush_r+0x108>)
 80009ea:	40ca      	lsrs	r2, r1
 80009ec:	07d6      	lsls	r6, r2, #31
 80009ee:	d544      	bpl.n	8000a7a <__sflush_r+0xf2>
 80009f0:	2200      	movs	r2, #0
 80009f2:	6062      	str	r2, [r4, #4]
 80009f4:	04d9      	lsls	r1, r3, #19
 80009f6:	6922      	ldr	r2, [r4, #16]
 80009f8:	6022      	str	r2, [r4, #0]
 80009fa:	d504      	bpl.n	8000a06 <__sflush_r+0x7e>
 80009fc:	1c42      	adds	r2, r0, #1
 80009fe:	d101      	bne.n	8000a04 <__sflush_r+0x7c>
 8000a00:	682b      	ldr	r3, [r5, #0]
 8000a02:	b903      	cbnz	r3, 8000a06 <__sflush_r+0x7e>
 8000a04:	6560      	str	r0, [r4, #84]	; 0x54
 8000a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a08:	602f      	str	r7, [r5, #0]
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d0c9      	beq.n	80009a2 <__sflush_r+0x1a>
 8000a0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a12:	4299      	cmp	r1, r3
 8000a14:	d002      	beq.n	8000a1c <__sflush_r+0x94>
 8000a16:	4628      	mov	r0, r5
 8000a18:	f000 f994 	bl	8000d44 <_free_r>
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	6360      	str	r0, [r4, #52]	; 0x34
 8000a20:	e7c0      	b.n	80009a4 <__sflush_r+0x1c>
 8000a22:	2301      	movs	r3, #1
 8000a24:	4628      	mov	r0, r5
 8000a26:	47b0      	blx	r6
 8000a28:	1c41      	adds	r1, r0, #1
 8000a2a:	d1c8      	bne.n	80009be <__sflush_r+0x36>
 8000a2c:	682b      	ldr	r3, [r5, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0c5      	beq.n	80009be <__sflush_r+0x36>
 8000a32:	2b1d      	cmp	r3, #29
 8000a34:	d001      	beq.n	8000a3a <__sflush_r+0xb2>
 8000a36:	2b16      	cmp	r3, #22
 8000a38:	d101      	bne.n	8000a3e <__sflush_r+0xb6>
 8000a3a:	602f      	str	r7, [r5, #0]
 8000a3c:	e7b1      	b.n	80009a2 <__sflush_r+0x1a>
 8000a3e:	89a3      	ldrh	r3, [r4, #12]
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	81a3      	strh	r3, [r4, #12]
 8000a46:	e7ad      	b.n	80009a4 <__sflush_r+0x1c>
 8000a48:	690f      	ldr	r7, [r1, #16]
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d0a9      	beq.n	80009a2 <__sflush_r+0x1a>
 8000a4e:	0793      	lsls	r3, r2, #30
 8000a50:	680e      	ldr	r6, [r1, #0]
 8000a52:	bf08      	it	eq
 8000a54:	694b      	ldreq	r3, [r1, #20]
 8000a56:	600f      	str	r7, [r1, #0]
 8000a58:	bf18      	it	ne
 8000a5a:	2300      	movne	r3, #0
 8000a5c:	eba6 0807 	sub.w	r8, r6, r7
 8000a60:	608b      	str	r3, [r1, #8]
 8000a62:	f1b8 0f00 	cmp.w	r8, #0
 8000a66:	dd9c      	ble.n	80009a2 <__sflush_r+0x1a>
 8000a68:	4643      	mov	r3, r8
 8000a6a:	463a      	mov	r2, r7
 8000a6c:	6a21      	ldr	r1, [r4, #32]
 8000a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a70:	4628      	mov	r0, r5
 8000a72:	47b0      	blx	r6
 8000a74:	2800      	cmp	r0, #0
 8000a76:	dc06      	bgt.n	8000a86 <__sflush_r+0xfe>
 8000a78:	89a3      	ldrh	r3, [r4, #12]
 8000a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7e:	81a3      	strh	r3, [r4, #12]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	e78e      	b.n	80009a4 <__sflush_r+0x1c>
 8000a86:	4407      	add	r7, r0
 8000a88:	eba8 0800 	sub.w	r8, r8, r0
 8000a8c:	e7e9      	b.n	8000a62 <__sflush_r+0xda>
 8000a8e:	bf00      	nop
 8000a90:	20400001 	.word	0x20400001

08000a94 <_fflush_r>:
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	690b      	ldr	r3, [r1, #16]
 8000a98:	4605      	mov	r5, r0
 8000a9a:	460c      	mov	r4, r1
 8000a9c:	b1db      	cbz	r3, 8000ad6 <_fflush_r+0x42>
 8000a9e:	b118      	cbz	r0, 8000aa8 <_fflush_r+0x14>
 8000aa0:	6983      	ldr	r3, [r0, #24]
 8000aa2:	b90b      	cbnz	r3, 8000aa8 <_fflush_r+0x14>
 8000aa4:	f000 f860 	bl	8000b68 <__sinit>
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <_fflush_r+0x48>)
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	d109      	bne.n	8000ac2 <_fflush_r+0x2e>
 8000aae:	686c      	ldr	r4, [r5, #4]
 8000ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ab4:	b17b      	cbz	r3, 8000ad6 <_fflush_r+0x42>
 8000ab6:	4621      	mov	r1, r4
 8000ab8:	4628      	mov	r0, r5
 8000aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000abe:	f7ff bf63 	b.w	8000988 <__sflush_r>
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <_fflush_r+0x4c>)
 8000ac4:	429c      	cmp	r4, r3
 8000ac6:	d101      	bne.n	8000acc <_fflush_r+0x38>
 8000ac8:	68ac      	ldr	r4, [r5, #8]
 8000aca:	e7f1      	b.n	8000ab0 <_fflush_r+0x1c>
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <_fflush_r+0x50>)
 8000ace:	429c      	cmp	r4, r3
 8000ad0:	bf08      	it	eq
 8000ad2:	68ec      	ldreq	r4, [r5, #12]
 8000ad4:	e7ec      	b.n	8000ab0 <_fflush_r+0x1c>
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	bd38      	pop	{r3, r4, r5, pc}
 8000ada:	bf00      	nop
 8000adc:	0800108c 	.word	0x0800108c
 8000ae0:	080010ac 	.word	0x080010ac
 8000ae4:	0800106c 	.word	0x0800106c

08000ae8 <std>:
 8000ae8:	2300      	movs	r3, #0
 8000aea:	b510      	push	{r4, lr}
 8000aec:	4604      	mov	r4, r0
 8000aee:	e9c0 3300 	strd	r3, r3, [r0]
 8000af2:	6083      	str	r3, [r0, #8]
 8000af4:	8181      	strh	r1, [r0, #12]
 8000af6:	6643      	str	r3, [r0, #100]	; 0x64
 8000af8:	81c2      	strh	r2, [r0, #14]
 8000afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000afe:	6183      	str	r3, [r0, #24]
 8000b00:	4619      	mov	r1, r3
 8000b02:	2208      	movs	r2, #8
 8000b04:	305c      	adds	r0, #92	; 0x5c
 8000b06:	f7ff fe13 	bl	8000730 <memset>
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <std+0x38>)
 8000b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <std+0x3c>)
 8000b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <std+0x40>)
 8000b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <std+0x44>)
 8000b18:	6224      	str	r4, [r4, #32]
 8000b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8000b1c:	bd10      	pop	{r4, pc}
 8000b1e:	bf00      	nop
 8000b20:	08000eb5 	.word	0x08000eb5
 8000b24:	08000ed7 	.word	0x08000ed7
 8000b28:	08000f0f 	.word	0x08000f0f
 8000b2c:	08000f33 	.word	0x08000f33

08000b30 <_cleanup_r>:
 8000b30:	4901      	ldr	r1, [pc, #4]	; (8000b38 <_cleanup_r+0x8>)
 8000b32:	f000 b885 	b.w	8000c40 <_fwalk_reent>
 8000b36:	bf00      	nop
 8000b38:	08000a95 	.word	0x08000a95

08000b3c <__sfmoreglue>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	1e4a      	subs	r2, r1, #1
 8000b40:	2568      	movs	r5, #104	; 0x68
 8000b42:	4355      	muls	r5, r2
 8000b44:	460e      	mov	r6, r1
 8000b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b4a:	f000 f949 	bl	8000de0 <_malloc_r>
 8000b4e:	4604      	mov	r4, r0
 8000b50:	b140      	cbz	r0, 8000b64 <__sfmoreglue+0x28>
 8000b52:	2100      	movs	r1, #0
 8000b54:	e9c0 1600 	strd	r1, r6, [r0]
 8000b58:	300c      	adds	r0, #12
 8000b5a:	60a0      	str	r0, [r4, #8]
 8000b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b60:	f7ff fde6 	bl	8000730 <memset>
 8000b64:	4620      	mov	r0, r4
 8000b66:	bd70      	pop	{r4, r5, r6, pc}

08000b68 <__sinit>:
 8000b68:	6983      	ldr	r3, [r0, #24]
 8000b6a:	b510      	push	{r4, lr}
 8000b6c:	4604      	mov	r4, r0
 8000b6e:	bb33      	cbnz	r3, 8000bbe <__sinit+0x56>
 8000b70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000b74:	6503      	str	r3, [r0, #80]	; 0x50
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <__sinit+0x58>)
 8000b78:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <__sinit+0x5c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6282      	str	r2, [r0, #40]	; 0x28
 8000b7e:	4298      	cmp	r0, r3
 8000b80:	bf04      	itt	eq
 8000b82:	2301      	moveq	r3, #1
 8000b84:	6183      	streq	r3, [r0, #24]
 8000b86:	f000 f81f 	bl	8000bc8 <__sfp>
 8000b8a:	6060      	str	r0, [r4, #4]
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f000 f81b 	bl	8000bc8 <__sfp>
 8000b92:	60a0      	str	r0, [r4, #8]
 8000b94:	4620      	mov	r0, r4
 8000b96:	f000 f817 	bl	8000bc8 <__sfp>
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60e0      	str	r0, [r4, #12]
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	6860      	ldr	r0, [r4, #4]
 8000ba2:	f7ff ffa1 	bl	8000ae8 <std>
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2109      	movs	r1, #9
 8000baa:	68a0      	ldr	r0, [r4, #8]
 8000bac:	f7ff ff9c 	bl	8000ae8 <std>
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	2112      	movs	r1, #18
 8000bb4:	68e0      	ldr	r0, [r4, #12]
 8000bb6:	f7ff ff97 	bl	8000ae8 <std>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61a3      	str	r3, [r4, #24]
 8000bbe:	bd10      	pop	{r4, pc}
 8000bc0:	08001068 	.word	0x08001068
 8000bc4:	08000b31 	.word	0x08000b31

08000bc8 <__sfp>:
 8000bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bca:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <__sfp+0x70>)
 8000bcc:	681e      	ldr	r6, [r3, #0]
 8000bce:	69b3      	ldr	r3, [r6, #24]
 8000bd0:	4607      	mov	r7, r0
 8000bd2:	b913      	cbnz	r3, 8000bda <__sfp+0x12>
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	f7ff ffc7 	bl	8000b68 <__sinit>
 8000bda:	3648      	adds	r6, #72	; 0x48
 8000bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	d503      	bpl.n	8000bec <__sfp+0x24>
 8000be4:	6833      	ldr	r3, [r6, #0]
 8000be6:	b133      	cbz	r3, 8000bf6 <__sfp+0x2e>
 8000be8:	6836      	ldr	r6, [r6, #0]
 8000bea:	e7f7      	b.n	8000bdc <__sfp+0x14>
 8000bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000bf0:	b16d      	cbz	r5, 8000c0e <__sfp+0x46>
 8000bf2:	3468      	adds	r4, #104	; 0x68
 8000bf4:	e7f4      	b.n	8000be0 <__sfp+0x18>
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4638      	mov	r0, r7
 8000bfa:	f7ff ff9f 	bl	8000b3c <__sfmoreglue>
 8000bfe:	6030      	str	r0, [r6, #0]
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d1f1      	bne.n	8000be8 <__sfp+0x20>
 8000c04:	230c      	movs	r3, #12
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	4604      	mov	r4, r0
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <__sfp+0x74>)
 8000c10:	6665      	str	r5, [r4, #100]	; 0x64
 8000c12:	e9c4 5500 	strd	r5, r5, [r4]
 8000c16:	60a5      	str	r5, [r4, #8]
 8000c18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000c1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000c20:	2208      	movs	r2, #8
 8000c22:	4629      	mov	r1, r5
 8000c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c28:	f7ff fd82 	bl	8000730 <memset>
 8000c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c34:	e7e9      	b.n	8000c0a <__sfp+0x42>
 8000c36:	bf00      	nop
 8000c38:	08001068 	.word	0x08001068
 8000c3c:	ffff0001 	.word	0xffff0001

08000c40 <_fwalk_reent>:
 8000c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c44:	4680      	mov	r8, r0
 8000c46:	4689      	mov	r9, r1
 8000c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b914      	cbnz	r4, 8000c56 <_fwalk_reent+0x16>
 8000c50:	4630      	mov	r0, r6
 8000c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000c5a:	3f01      	subs	r7, #1
 8000c5c:	d501      	bpl.n	8000c62 <_fwalk_reent+0x22>
 8000c5e:	6824      	ldr	r4, [r4, #0]
 8000c60:	e7f5      	b.n	8000c4e <_fwalk_reent+0xe>
 8000c62:	89ab      	ldrh	r3, [r5, #12]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d907      	bls.n	8000c78 <_fwalk_reent+0x38>
 8000c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	d003      	beq.n	8000c78 <_fwalk_reent+0x38>
 8000c70:	4629      	mov	r1, r5
 8000c72:	4640      	mov	r0, r8
 8000c74:	47c8      	blx	r9
 8000c76:	4306      	orrs	r6, r0
 8000c78:	3568      	adds	r5, #104	; 0x68
 8000c7a:	e7ee      	b.n	8000c5a <_fwalk_reent+0x1a>

08000c7c <__swhatbuf_r>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	460e      	mov	r6, r1
 8000c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c84:	2900      	cmp	r1, #0
 8000c86:	b096      	sub	sp, #88	; 0x58
 8000c88:	4614      	mov	r4, r2
 8000c8a:	461d      	mov	r5, r3
 8000c8c:	da07      	bge.n	8000c9e <__swhatbuf_r+0x22>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	602b      	str	r3, [r5, #0]
 8000c92:	89b3      	ldrh	r3, [r6, #12]
 8000c94:	061a      	lsls	r2, r3, #24
 8000c96:	d410      	bmi.n	8000cba <__swhatbuf_r+0x3e>
 8000c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9c:	e00e      	b.n	8000cbc <__swhatbuf_r+0x40>
 8000c9e:	466a      	mov	r2, sp
 8000ca0:	f000 f96e 	bl	8000f80 <_fstat_r>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	dbf2      	blt.n	8000c8e <__swhatbuf_r+0x12>
 8000ca8:	9a01      	ldr	r2, [sp, #4]
 8000caa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000cb2:	425a      	negs	r2, r3
 8000cb4:	415a      	adcs	r2, r3
 8000cb6:	602a      	str	r2, [r5, #0]
 8000cb8:	e7ee      	b.n	8000c98 <__swhatbuf_r+0x1c>
 8000cba:	2340      	movs	r3, #64	; 0x40
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	6023      	str	r3, [r4, #0]
 8000cc0:	b016      	add	sp, #88	; 0x58
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}

08000cc4 <__smakebuf_r>:
 8000cc4:	898b      	ldrh	r3, [r1, #12]
 8000cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cc8:	079d      	lsls	r5, r3, #30
 8000cca:	4606      	mov	r6, r0
 8000ccc:	460c      	mov	r4, r1
 8000cce:	d507      	bpl.n	8000ce0 <__smakebuf_r+0x1c>
 8000cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000cd4:	6023      	str	r3, [r4, #0]
 8000cd6:	6123      	str	r3, [r4, #16]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	6163      	str	r3, [r4, #20]
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	ab01      	add	r3, sp, #4
 8000ce2:	466a      	mov	r2, sp
 8000ce4:	f7ff ffca 	bl	8000c7c <__swhatbuf_r>
 8000ce8:	9900      	ldr	r1, [sp, #0]
 8000cea:	4605      	mov	r5, r0
 8000cec:	4630      	mov	r0, r6
 8000cee:	f000 f877 	bl	8000de0 <_malloc_r>
 8000cf2:	b948      	cbnz	r0, 8000d08 <__smakebuf_r+0x44>
 8000cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cf8:	059a      	lsls	r2, r3, #22
 8000cfa:	d4ef      	bmi.n	8000cdc <__smakebuf_r+0x18>
 8000cfc:	f023 0303 	bic.w	r3, r3, #3
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	81a3      	strh	r3, [r4, #12]
 8000d06:	e7e3      	b.n	8000cd0 <__smakebuf_r+0xc>
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <__smakebuf_r+0x7c>)
 8000d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d0c:	89a3      	ldrh	r3, [r4, #12]
 8000d0e:	6020      	str	r0, [r4, #0]
 8000d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d14:	81a3      	strh	r3, [r4, #12]
 8000d16:	9b00      	ldr	r3, [sp, #0]
 8000d18:	6163      	str	r3, [r4, #20]
 8000d1a:	9b01      	ldr	r3, [sp, #4]
 8000d1c:	6120      	str	r0, [r4, #16]
 8000d1e:	b15b      	cbz	r3, 8000d38 <__smakebuf_r+0x74>
 8000d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d24:	4630      	mov	r0, r6
 8000d26:	f000 f93d 	bl	8000fa4 <_isatty_r>
 8000d2a:	b128      	cbz	r0, 8000d38 <__smakebuf_r+0x74>
 8000d2c:	89a3      	ldrh	r3, [r4, #12]
 8000d2e:	f023 0303 	bic.w	r3, r3, #3
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	81a3      	strh	r3, [r4, #12]
 8000d38:	89a3      	ldrh	r3, [r4, #12]
 8000d3a:	431d      	orrs	r5, r3
 8000d3c:	81a5      	strh	r5, [r4, #12]
 8000d3e:	e7cd      	b.n	8000cdc <__smakebuf_r+0x18>
 8000d40:	08000b31 	.word	0x08000b31

08000d44 <_free_r>:
 8000d44:	b538      	push	{r3, r4, r5, lr}
 8000d46:	4605      	mov	r5, r0
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d045      	beq.n	8000dd8 <_free_r+0x94>
 8000d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d50:	1f0c      	subs	r4, r1, #4
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bfb8      	it	lt
 8000d56:	18e4      	addlt	r4, r4, r3
 8000d58:	f000 f946 	bl	8000fe8 <__malloc_lock>
 8000d5c:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <_free_r+0x98>)
 8000d5e:	6813      	ldr	r3, [r2, #0]
 8000d60:	4610      	mov	r0, r2
 8000d62:	b933      	cbnz	r3, 8000d72 <_free_r+0x2e>
 8000d64:	6063      	str	r3, [r4, #4]
 8000d66:	6014      	str	r4, [r2, #0]
 8000d68:	4628      	mov	r0, r5
 8000d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d6e:	f000 b93c 	b.w	8000fea <__malloc_unlock>
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	d90c      	bls.n	8000d90 <_free_r+0x4c>
 8000d76:	6821      	ldr	r1, [r4, #0]
 8000d78:	1862      	adds	r2, r4, r1
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	bf04      	itt	eq
 8000d7e:	681a      	ldreq	r2, [r3, #0]
 8000d80:	685b      	ldreq	r3, [r3, #4]
 8000d82:	6063      	str	r3, [r4, #4]
 8000d84:	bf04      	itt	eq
 8000d86:	1852      	addeq	r2, r2, r1
 8000d88:	6022      	streq	r2, [r4, #0]
 8000d8a:	6004      	str	r4, [r0, #0]
 8000d8c:	e7ec      	b.n	8000d68 <_free_r+0x24>
 8000d8e:	4613      	mov	r3, r2
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	b10a      	cbz	r2, 8000d98 <_free_r+0x54>
 8000d94:	42a2      	cmp	r2, r4
 8000d96:	d9fa      	bls.n	8000d8e <_free_r+0x4a>
 8000d98:	6819      	ldr	r1, [r3, #0]
 8000d9a:	1858      	adds	r0, r3, r1
 8000d9c:	42a0      	cmp	r0, r4
 8000d9e:	d10b      	bne.n	8000db8 <_free_r+0x74>
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	4401      	add	r1, r0
 8000da4:	1858      	adds	r0, r3, r1
 8000da6:	4282      	cmp	r2, r0
 8000da8:	6019      	str	r1, [r3, #0]
 8000daa:	d1dd      	bne.n	8000d68 <_free_r+0x24>
 8000dac:	6810      	ldr	r0, [r2, #0]
 8000dae:	6852      	ldr	r2, [r2, #4]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	4401      	add	r1, r0
 8000db4:	6019      	str	r1, [r3, #0]
 8000db6:	e7d7      	b.n	8000d68 <_free_r+0x24>
 8000db8:	d902      	bls.n	8000dc0 <_free_r+0x7c>
 8000dba:	230c      	movs	r3, #12
 8000dbc:	602b      	str	r3, [r5, #0]
 8000dbe:	e7d3      	b.n	8000d68 <_free_r+0x24>
 8000dc0:	6820      	ldr	r0, [r4, #0]
 8000dc2:	1821      	adds	r1, r4, r0
 8000dc4:	428a      	cmp	r2, r1
 8000dc6:	bf04      	itt	eq
 8000dc8:	6811      	ldreq	r1, [r2, #0]
 8000dca:	6852      	ldreq	r2, [r2, #4]
 8000dcc:	6062      	str	r2, [r4, #4]
 8000dce:	bf04      	itt	eq
 8000dd0:	1809      	addeq	r1, r1, r0
 8000dd2:	6021      	streq	r1, [r4, #0]
 8000dd4:	605c      	str	r4, [r3, #4]
 8000dd6:	e7c7      	b.n	8000d68 <_free_r+0x24>
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000084 	.word	0x20000084

08000de0 <_malloc_r>:
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	1ccd      	adds	r5, r1, #3
 8000de4:	f025 0503 	bic.w	r5, r5, #3
 8000de8:	3508      	adds	r5, #8
 8000dea:	2d0c      	cmp	r5, #12
 8000dec:	bf38      	it	cc
 8000dee:	250c      	movcc	r5, #12
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	4606      	mov	r6, r0
 8000df4:	db01      	blt.n	8000dfa <_malloc_r+0x1a>
 8000df6:	42a9      	cmp	r1, r5
 8000df8:	d903      	bls.n	8000e02 <_malloc_r+0x22>
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	6033      	str	r3, [r6, #0]
 8000dfe:	2000      	movs	r0, #0
 8000e00:	bd70      	pop	{r4, r5, r6, pc}
 8000e02:	f000 f8f1 	bl	8000fe8 <__malloc_lock>
 8000e06:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <_malloc_r+0xac>)
 8000e08:	6814      	ldr	r4, [r2, #0]
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	b991      	cbnz	r1, 8000e34 <_malloc_r+0x54>
 8000e0e:	4c20      	ldr	r4, [pc, #128]	; (8000e90 <_malloc_r+0xb0>)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	b91b      	cbnz	r3, 8000e1c <_malloc_r+0x3c>
 8000e14:	4630      	mov	r0, r6
 8000e16:	f000 f83d 	bl	8000e94 <_sbrk_r>
 8000e1a:	6020      	str	r0, [r4, #0]
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f000 f838 	bl	8000e94 <_sbrk_r>
 8000e24:	1c43      	adds	r3, r0, #1
 8000e26:	d124      	bne.n	8000e72 <_malloc_r+0x92>
 8000e28:	230c      	movs	r3, #12
 8000e2a:	6033      	str	r3, [r6, #0]
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	f000 f8dc 	bl	8000fea <__malloc_unlock>
 8000e32:	e7e4      	b.n	8000dfe <_malloc_r+0x1e>
 8000e34:	680b      	ldr	r3, [r1, #0]
 8000e36:	1b5b      	subs	r3, r3, r5
 8000e38:	d418      	bmi.n	8000e6c <_malloc_r+0x8c>
 8000e3a:	2b0b      	cmp	r3, #11
 8000e3c:	d90f      	bls.n	8000e5e <_malloc_r+0x7e>
 8000e3e:	600b      	str	r3, [r1, #0]
 8000e40:	50cd      	str	r5, [r1, r3]
 8000e42:	18cc      	adds	r4, r1, r3
 8000e44:	4630      	mov	r0, r6
 8000e46:	f000 f8d0 	bl	8000fea <__malloc_unlock>
 8000e4a:	f104 000b 	add.w	r0, r4, #11
 8000e4e:	1d23      	adds	r3, r4, #4
 8000e50:	f020 0007 	bic.w	r0, r0, #7
 8000e54:	1ac3      	subs	r3, r0, r3
 8000e56:	d0d3      	beq.n	8000e00 <_malloc_r+0x20>
 8000e58:	425a      	negs	r2, r3
 8000e5a:	50e2      	str	r2, [r4, r3]
 8000e5c:	e7d0      	b.n	8000e00 <_malloc_r+0x20>
 8000e5e:	428c      	cmp	r4, r1
 8000e60:	684b      	ldr	r3, [r1, #4]
 8000e62:	bf16      	itet	ne
 8000e64:	6063      	strne	r3, [r4, #4]
 8000e66:	6013      	streq	r3, [r2, #0]
 8000e68:	460c      	movne	r4, r1
 8000e6a:	e7eb      	b.n	8000e44 <_malloc_r+0x64>
 8000e6c:	460c      	mov	r4, r1
 8000e6e:	6849      	ldr	r1, [r1, #4]
 8000e70:	e7cc      	b.n	8000e0c <_malloc_r+0x2c>
 8000e72:	1cc4      	adds	r4, r0, #3
 8000e74:	f024 0403 	bic.w	r4, r4, #3
 8000e78:	42a0      	cmp	r0, r4
 8000e7a:	d005      	beq.n	8000e88 <_malloc_r+0xa8>
 8000e7c:	1a21      	subs	r1, r4, r0
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f000 f808 	bl	8000e94 <_sbrk_r>
 8000e84:	3001      	adds	r0, #1
 8000e86:	d0cf      	beq.n	8000e28 <_malloc_r+0x48>
 8000e88:	6025      	str	r5, [r4, #0]
 8000e8a:	e7db      	b.n	8000e44 <_malloc_r+0x64>
 8000e8c:	20000084 	.word	0x20000084
 8000e90:	20000088 	.word	0x20000088

08000e94 <_sbrk_r>:
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	4c06      	ldr	r4, [pc, #24]	; (8000eb0 <_sbrk_r+0x1c>)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	4605      	mov	r5, r0
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	6023      	str	r3, [r4, #0]
 8000ea0:	f7ff fbbc 	bl	800061c <_sbrk>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	d102      	bne.n	8000eae <_sbrk_r+0x1a>
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	b103      	cbz	r3, 8000eae <_sbrk_r+0x1a>
 8000eac:	602b      	str	r3, [r5, #0]
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
 8000eb0:	2000008c 	.word	0x2000008c

08000eb4 <__sread>:
 8000eb4:	b510      	push	{r4, lr}
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ebc:	f000 f896 	bl	8000fec <_read_r>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	bfab      	itete	ge
 8000ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8000ec8:	181b      	addge	r3, r3, r0
 8000eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ece:	bfac      	ite	ge
 8000ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ed2:	81a3      	strhlt	r3, [r4, #12]
 8000ed4:	bd10      	pop	{r4, pc}

08000ed6 <__swrite>:
 8000ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eda:	461f      	mov	r7, r3
 8000edc:	898b      	ldrh	r3, [r1, #12]
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	4605      	mov	r5, r0
 8000ee2:	460c      	mov	r4, r1
 8000ee4:	4616      	mov	r6, r2
 8000ee6:	d505      	bpl.n	8000ef4 <__swrite+0x1e>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	2200      	movs	r2, #0
 8000eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ef0:	f000 f868 	bl	8000fc4 <_lseek_r>
 8000ef4:	89a3      	ldrh	r3, [r4, #12]
 8000ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000efe:	81a3      	strh	r3, [r4, #12]
 8000f00:	4632      	mov	r2, r6
 8000f02:	463b      	mov	r3, r7
 8000f04:	4628      	mov	r0, r5
 8000f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f0a:	f000 b817 	b.w	8000f3c <_write_r>

08000f0e <__sseek>:
 8000f0e:	b510      	push	{r4, lr}
 8000f10:	460c      	mov	r4, r1
 8000f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f16:	f000 f855 	bl	8000fc4 <_lseek_r>
 8000f1a:	1c43      	adds	r3, r0, #1
 8000f1c:	89a3      	ldrh	r3, [r4, #12]
 8000f1e:	bf15      	itete	ne
 8000f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f2a:	81a3      	strheq	r3, [r4, #12]
 8000f2c:	bf18      	it	ne
 8000f2e:	81a3      	strhne	r3, [r4, #12]
 8000f30:	bd10      	pop	{r4, pc}

08000f32 <__sclose>:
 8000f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f36:	f000 b813 	b.w	8000f60 <_close_r>
	...

08000f3c <_write_r>:
 8000f3c:	b538      	push	{r3, r4, r5, lr}
 8000f3e:	4c07      	ldr	r4, [pc, #28]	; (8000f5c <_write_r+0x20>)
 8000f40:	4605      	mov	r5, r0
 8000f42:	4608      	mov	r0, r1
 8000f44:	4611      	mov	r1, r2
 8000f46:	2200      	movs	r2, #0
 8000f48:	6022      	str	r2, [r4, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f7ff fb19 	bl	8000582 <_write>
 8000f50:	1c43      	adds	r3, r0, #1
 8000f52:	d102      	bne.n	8000f5a <_write_r+0x1e>
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	b103      	cbz	r3, 8000f5a <_write_r+0x1e>
 8000f58:	602b      	str	r3, [r5, #0]
 8000f5a:	bd38      	pop	{r3, r4, r5, pc}
 8000f5c:	2000008c 	.word	0x2000008c

08000f60 <_close_r>:
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	4c06      	ldr	r4, [pc, #24]	; (8000f7c <_close_r+0x1c>)
 8000f64:	2300      	movs	r3, #0
 8000f66:	4605      	mov	r5, r0
 8000f68:	4608      	mov	r0, r1
 8000f6a:	6023      	str	r3, [r4, #0]
 8000f6c:	f7ff fb25 	bl	80005ba <_close>
 8000f70:	1c43      	adds	r3, r0, #1
 8000f72:	d102      	bne.n	8000f7a <_close_r+0x1a>
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	b103      	cbz	r3, 8000f7a <_close_r+0x1a>
 8000f78:	602b      	str	r3, [r5, #0]
 8000f7a:	bd38      	pop	{r3, r4, r5, pc}
 8000f7c:	2000008c 	.word	0x2000008c

08000f80 <_fstat_r>:
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	4c07      	ldr	r4, [pc, #28]	; (8000fa0 <_fstat_r+0x20>)
 8000f84:	2300      	movs	r3, #0
 8000f86:	4605      	mov	r5, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	6023      	str	r3, [r4, #0]
 8000f8e:	f7ff fb1f 	bl	80005d0 <_fstat>
 8000f92:	1c43      	adds	r3, r0, #1
 8000f94:	d102      	bne.n	8000f9c <_fstat_r+0x1c>
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	b103      	cbz	r3, 8000f9c <_fstat_r+0x1c>
 8000f9a:	602b      	str	r3, [r5, #0]
 8000f9c:	bd38      	pop	{r3, r4, r5, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000008c 	.word	0x2000008c

08000fa4 <_isatty_r>:
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	4c06      	ldr	r4, [pc, #24]	; (8000fc0 <_isatty_r+0x1c>)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	4605      	mov	r5, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	6023      	str	r3, [r4, #0]
 8000fb0:	f7ff fb1d 	bl	80005ee <_isatty>
 8000fb4:	1c43      	adds	r3, r0, #1
 8000fb6:	d102      	bne.n	8000fbe <_isatty_r+0x1a>
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	b103      	cbz	r3, 8000fbe <_isatty_r+0x1a>
 8000fbc:	602b      	str	r3, [r5, #0]
 8000fbe:	bd38      	pop	{r3, r4, r5, pc}
 8000fc0:	2000008c 	.word	0x2000008c

08000fc4 <_lseek_r>:
 8000fc4:	b538      	push	{r3, r4, r5, lr}
 8000fc6:	4c07      	ldr	r4, [pc, #28]	; (8000fe4 <_lseek_r+0x20>)
 8000fc8:	4605      	mov	r5, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4611      	mov	r1, r2
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6022      	str	r2, [r4, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	f7ff fb15 	bl	8000602 <_lseek>
 8000fd8:	1c43      	adds	r3, r0, #1
 8000fda:	d102      	bne.n	8000fe2 <_lseek_r+0x1e>
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	b103      	cbz	r3, 8000fe2 <_lseek_r+0x1e>
 8000fe0:	602b      	str	r3, [r5, #0]
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
 8000fe4:	2000008c 	.word	0x2000008c

08000fe8 <__malloc_lock>:
 8000fe8:	4770      	bx	lr

08000fea <__malloc_unlock>:
 8000fea:	4770      	bx	lr

08000fec <_read_r>:
 8000fec:	b538      	push	{r3, r4, r5, lr}
 8000fee:	4c07      	ldr	r4, [pc, #28]	; (800100c <_read_r+0x20>)
 8000ff0:	4605      	mov	r5, r0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	6022      	str	r2, [r4, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f7ff faa4 	bl	8000548 <_read>
 8001000:	1c43      	adds	r3, r0, #1
 8001002:	d102      	bne.n	800100a <_read_r+0x1e>
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	b103      	cbz	r3, 800100a <_read_r+0x1e>
 8001008:	602b      	str	r3, [r5, #0]
 800100a:	bd38      	pop	{r3, r4, r5, pc}
 800100c:	2000008c 	.word	0x2000008c

08001010 <_init>:
 8001010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001012:	bf00      	nop
 8001014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001016:	bc08      	pop	{r3}
 8001018:	469e      	mov	lr, r3
 800101a:	4770      	bx	lr

0800101c <_fini>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	bf00      	nop
 8001020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001022:	bc08      	pop	{r3}
 8001024:	469e      	mov	lr, r3
 8001026:	4770      	bx	lr

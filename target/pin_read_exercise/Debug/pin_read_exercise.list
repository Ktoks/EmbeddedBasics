
pin_read_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000164  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800030c  08000314  00010314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800030c  0800030c  00010314  2**0
                  CONTENTS
  4 .ARM          00000000  0800030c  0800030c  00010314  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800030c  08000314  00010314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800030c  0800030c  0001030c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000310  08000310  00010310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000314  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000314  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010314  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000141  00000000  00000000  0001033e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000096  00000000  00000000  0001047f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f02  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000424  00000000  00000000  00011492  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b3f  00000000  00000000  000118b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000153f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00015470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080002f4 	.word	0x080002f4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080002f4 	.word	0x080002f4

080001e8 <main>:

	uint32_t volatile *pPortAModeRegister = (uint32_t*)0x40020000;
	uint32_t volatile *pPortAInRegister = (uint32_t*)0x40020010;

	// Clock: enable clock for A and D by setting 0th and 3rd bits to be 1 on AHB1ENR
	*pClockControlRegister |= 1 << 3;
 80001e8:	4816      	ldr	r0, [pc, #88]	; (8000244 <main+0x5c>)
	*pClockControlRegister |= 1 << 0;

	// D: configure PD12 as output
	*pPortDModeRegister &= ~(3 << 24);
 80001ea:	4b17      	ldr	r3, [pc, #92]	; (8000248 <main+0x60>)
	// A: configuring PA0 for input
	*pPortAModeRegister &= ~(3 << 0);
	uint8_t volatile pinStatus;

	for(;;){
		pinStatus = (uint8_t)(*pPortAInRegister & 0x1);
 80001ec:	4917      	ldr	r1, [pc, #92]	; (800024c <main+0x64>)

		*pPortDOutRegister |= (1 << 12);
		}
		else
		{
			*pPortDOutRegister &= ~(1 << 12);
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <main+0x68>)
{
 80001f0:	b430      	push	{r4, r5}
	*pClockControlRegister |= 1 << 3;
 80001f2:	6804      	ldr	r4, [r0, #0]
	*pPortAModeRegister &= ~(3 << 0);
 80001f4:	4d17      	ldr	r5, [pc, #92]	; (8000254 <main+0x6c>)
	*pClockControlRegister |= 1 << 3;
 80001f6:	f044 0408 	orr.w	r4, r4, #8
 80001fa:	6004      	str	r4, [r0, #0]
	*pClockControlRegister |= 1 << 0;
 80001fc:	6804      	ldr	r4, [r0, #0]
 80001fe:	f044 0401 	orr.w	r4, r4, #1
 8000202:	6004      	str	r4, [r0, #0]
	*pPortDModeRegister &= ~(3 << 24);
 8000204:	6818      	ldr	r0, [r3, #0]
 8000206:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800020a:	6018      	str	r0, [r3, #0]
	*pPortDModeRegister |= (1 << 24);
 800020c:	6818      	ldr	r0, [r3, #0]
 800020e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8000212:	6018      	str	r0, [r3, #0]
	*pPortAModeRegister &= ~(3 << 0);
 8000214:	682b      	ldr	r3, [r5, #0]
 8000216:	f023 0303 	bic.w	r3, r3, #3
{
 800021a:	b082      	sub	sp, #8
	*pPortAModeRegister &= ~(3 << 0);
 800021c:	602b      	str	r3, [r5, #0]
		pinStatus = (uint8_t)(*pPortAInRegister & 0x1);
 800021e:	680b      	ldr	r3, [r1, #0]
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	f88d 3007 	strb.w	r3, [sp, #7]
		if (pinStatus)
 8000228:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800022c:	b123      	cbz	r3, 8000238 <main+0x50>
		*pPortDOutRegister |= (1 << 12);
 800022e:	6813      	ldr	r3, [r2, #0]
 8000230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000234:	6013      	str	r3, [r2, #0]
 8000236:	e7f2      	b.n	800021e <main+0x36>
			*pPortDOutRegister &= ~(1 << 12);
 8000238:	6813      	ldr	r3, [r2, #0]
 800023a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	e7ed      	b.n	800021e <main+0x36>
 8000242:	bf00      	nop
 8000244:	40023830 	.word	0x40023830
 8000248:	40020c00 	.word	0x40020c00
 800024c:	40020010 	.word	0x40020010
 8000250:	40020c14 	.word	0x40020c14
 8000254:	40020000 	.word	0x40020000

08000258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <LoopForever+0x6>)
  ldr r1, =_edata
 8000262:	490d      	ldr	r1, [pc, #52]	; (8000298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <LoopForever+0xe>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000268:	e002      	b.n	8000270 <LoopCopyDataInit>

0800026a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800026c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026e:	3304      	adds	r3, #4

08000270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000274:	d3f9      	bcc.n	800026a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000278:	4c0a      	ldr	r4, [pc, #40]	; (80002a4 <LoopForever+0x16>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800027c:	e001      	b.n	8000282 <LoopFillZerobss>

0800027e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000280:	3204      	adds	r2, #4

08000282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000284:	d3fb      	bcc.n	800027e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000286:	f000 f811 	bl	80002ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028a:	f7ff ffad 	bl	80001e8 <main>

0800028e <LoopForever>:

LoopForever:
    b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   r0, =_estack
 8000290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	08000314 	.word	0x08000314
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC_IRQHandler>
	...

080002ac <__libc_init_array>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	4e0d      	ldr	r6, [pc, #52]	; (80002e4 <__libc_init_array+0x38>)
 80002b0:	4c0d      	ldr	r4, [pc, #52]	; (80002e8 <__libc_init_array+0x3c>)
 80002b2:	1ba4      	subs	r4, r4, r6
 80002b4:	10a4      	asrs	r4, r4, #2
 80002b6:	2500      	movs	r5, #0
 80002b8:	42a5      	cmp	r5, r4
 80002ba:	d109      	bne.n	80002d0 <__libc_init_array+0x24>
 80002bc:	4e0b      	ldr	r6, [pc, #44]	; (80002ec <__libc_init_array+0x40>)
 80002be:	4c0c      	ldr	r4, [pc, #48]	; (80002f0 <__libc_init_array+0x44>)
 80002c0:	f000 f818 	bl	80002f4 <_init>
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	10a4      	asrs	r4, r4, #2
 80002c8:	2500      	movs	r5, #0
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	d105      	bne.n	80002da <__libc_init_array+0x2e>
 80002ce:	bd70      	pop	{r4, r5, r6, pc}
 80002d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002d4:	4798      	blx	r3
 80002d6:	3501      	adds	r5, #1
 80002d8:	e7ee      	b.n	80002b8 <__libc_init_array+0xc>
 80002da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002de:	4798      	blx	r3
 80002e0:	3501      	adds	r5, #1
 80002e2:	e7f2      	b.n	80002ca <__libc_init_array+0x1e>
 80002e4:	0800030c 	.word	0x0800030c
 80002e8:	0800030c 	.word	0x0800030c
 80002ec:	0800030c 	.word	0x0800030c
 80002f0:	08000310 	.word	0x08000310

080002f4 <_init>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr

08000300 <_fini>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

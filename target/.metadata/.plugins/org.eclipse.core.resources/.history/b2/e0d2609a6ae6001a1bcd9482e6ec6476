/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include<stdio.h>
#include<stdint.h>
//#include "main.h"

void delay(void){
	for (uint32_t i = 0; i < 300000; i++);
}


int main(void)
{

	// peripheral register addresses
	uint32_t volatile *const pGPIOModeReg 	= 	(uint32_t*) 0x40020C00;
	uint32_t volatile *const pInputDataReg 	= 	(uint32_t*) 0x40020C10;
	uint32_t volatile *const pOutputDataReg = 	(uint32_t*) 0x40020C14;
	uint32_t volatile *const pClockCtrlReg 	= 	(uint32_t*) 0x40023830;
	uint32_t volatile *const pPullupDownReg = 	(uint32_t*) 0x40020C0C;

	// enable the clock for gpio peripheral d in AHB1ENR
	*pClockCtrlReg |= (1 <<3);

	// configure the mode of row pins to be output (PD0-3)
		// clear pins 0-3
	*pGPIOModeReg &= ~(0xFF);
		// set pins 0-3
	*pGPIOModeReg |= 0x55;

	// configure the mode of column pins to be input (PD8-11)
		// clear pins 8-11
	*pGPIOModeReg &= ~(0xFF << 16);

	// enable internal pull-up resistors for pd8-11
		// clear pins 8-11
	*pPullupDownReg &= ~(0xFF << 16);
	*pPullupDownReg |= (0x55 << 16);

	while(1){
		// make all rows high
		*pOutputDataReg |= 0x0f;

		// make r1 low(pd0)
		*pOutputDataReg &= ~(1);

		// Scan the columns
		// check if c1(pd8) is high or low
		if(!(*pInputDataReg & (1 << 8))) {
			delay();
			printf("1\n");
		}

		// check if c2(pd9) is high or low
		if(!(*pInputDataReg & (1 << 9))) {
			delay();
			printf("2\n");
		}

		// check if c3(pd10) is high or low
		if(!(*pInputDataReg & (1 << 10))) {
			delay();
			printf("3\n");
		}

		// check if c4(pd11) is high or low
		if(!(*pInputDataReg & (1 << 11))) {
			delay();
			printf("A\n");
		}

		// make all rows high
		*pOutputDataReg |= 0x0f;

		// make r2 low(pd1)
		*pOutputDataReg &= ~(1 << 1);

		// Scan the columns
		// check if c1(pd8) is high or low
		if(!(*pInputDataReg & (1 << 8))) {
			delay();
			printf("4\n");
		}

		// check if c2(pd9) is high or low
		if(!(*pInputDataReg & (1 << 9))) {
			delay();
			printf("5\n");
		}

		// check if c3(pd10) is high or low
		if(!(*pInputDataReg & (1 << 10))) {
			delay();
			printf("6\n");
		}

		// check if c4(pd11) is high or low
		if(!(*pInputDataReg & (1 << 11))) {
			delay();
			printf("B\n");
		}

		// make all rows high
		*pOutputDataReg |= 0x0f;

		// make r3 low(pd1)
		*pOutputDataReg &= ~(1 << 2);

		// Scan the columns
		// check if c1(pd8) is high or low
		if(!(*pInputDataReg & (1 << 8))) {
			delay();
			printf("7\n");
		}

		// check if c2(pd9) is high or low
		if(!(*pInputDataReg & (1 << 9))) {
			delay();
			printf("8\n");
		}

		// check if c3(pd10) is high or low
		if(!(*pInputDataReg & (1 << 10))) {
			delay();
			printf("9\n");
		}

		// check if c4(pd11) is high or low
		if(!(*pInputDataReg & (1 << 11))) {
			delay();
			printf("C\n");
		}

		// make all rows high
		*pOutputDataReg |= 0x0f;

		// make r4 low(pd0)
		*pOutputDataReg &= ~(1 << 3);

		// Scan the columns
		// check if c1(pd8) is high or low
		if(!(*pInputDataReg & (1 << 8))) {
			delay();
			printf("1\n");
		}

		// check if c2(pd9) is high or low
		if(!(*pInputDataReg & (1 << 9))) {
			delay();
			printf("2\n");
		}

		// check if c3(pd10) is high or low
		if(!(*pInputDataReg & (1 << 10))) {
			delay();
			printf("3\n");
		}

		// check if c4(pd11) is high or low
		if(!(*pInputDataReg & (1 << 11))) {
			delay();
			printf("A\n");
		}

		// make all rows high
		*pOutputDataReg |= 0x0f;

		// make r2 low(pd1)
		*pOutputDataReg &= ~(1 << 4);

		// Scan the columns
		// check if c1(pd8) is high or low
		if(!(*pInputDataReg & (1 << 8))) {
			delay();
			printf("*\n");
		}

		// check if c2(pd9) is high or low
		if(!(*pInputDataReg & (1 << 9))) {
			delay();
			printf("0\n");
		}

		// check if c3(pd10) is high or low
		if(!(*pInputDataReg & (1 << 10))) {
			delay();
			printf("#\n");
		}

		// check if c4(pd11) is high or low
		if(!(*pInputDataReg & (1 << 11))) {
			delay();
			printf("D\n");
		}
	} // end while loop
}

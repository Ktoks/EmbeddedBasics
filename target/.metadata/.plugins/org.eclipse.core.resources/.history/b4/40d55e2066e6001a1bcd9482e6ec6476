/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include<stdio.h>
#include<stdint.h>
#include "main.h"


int main(void)
{

	// peripheral register addresses
	uint32_T volatile *const pGPIOModeReg 	= 	(uint32_t*) 0x40020C00;
	uint32_T volatile *const pInputDataReg 	= 	(uint32_t*) 0x40020C10;
	uint32_T volatile *const pOutputDataReg = 	(uint32_t*) 0x40020C14;
	uint32_T volatile *const pClockCtrlReg 	= 	(uint32_t*) 0x40023830;
	uint32_T volatile *const pPullupDownReg = 	(uint32_t*) 0x40020C0C;

	// enable the clock for gpio peripheral d in AHB1ENR
	*pClockCtrlReg |= (1 <<3);

	// configure the mode of row pins to be output (PD0-3)
		// clear pins 0-3
	*pGPIOModeReg &= ~(0xFF);
		// set pins 0-3
	*pGPIOModeReg |= 0x55;

	// configure the mode of column pins to be input (PD8-11)
		// clear pins 8-11
	*pGPIOModeReg &= ~(0xFF << 16);

	// enable internal pull-up resistors for pd8-11
		// clear pins 8-11
	*pPullupDownReg &= ~(0xFF << 16);
	*pPullupDownReg |= (0x55 << 16);


	while(1) {
		// initialization
//		pPortDReg->pin_0 = 1;
//		pPortDReg->pin_1 = 1;
//		pPortDReg->pin_2 = 1;
//		pPortDReg->pin_3 = 1;
//
//		uint32_t key = 0;


//		for (uint32_t i = 0; i < 4; i++ ) {
//			rows[i] = 0;
//			if (pPortDReg->pin_8 == 0) {
//				//wait for 200ms
//				key = i * 4 + 0;
//
//			}
//			if (pPortDReg->pin_9 == 0) {
//				//wait for 200ms
//				key = i * 4 + 1;
//			}
//			if (pPortDReg->pin_10 == 0) {
//				//wait for 200ms
//				key = i * 4 + 2;
//			}
//			if (pPortDReg->pin_11 == 0) {
//				//wait for 200ms
//				key = i * 4 + 3;
//			}
//		}
//		printf("key pressed: %c.", keys_pressed[key]);

	}
}
